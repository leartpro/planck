a                //ERROR: not a statement
b = 7            //integer
c = -3457        //integer
d = 54.356       //double
e = -23789.23589 //double
f = b + c        //integer
g = c + e        //double
h = d - e        //double
i = g *~ h       //double
j = i + g /~ h   //double
k = 'z'          //integer (ascii value of 'z')
l = "bla"        //ERROR: can not set value to pointer
j &= l           //reference from j to pointer from l

m << "bla"      //append a pointer chain
m <\            //unlink the pointer
n = m ?>        //integer
o << b          //append b on o
p = o >>        //set p to 'o.next'
stout <<= p     //print value of p



if o == p {
stdout <<= "value of o equals value of p"
} else if o === p {
stdout <<= "o is the same as p"
} else {
stdout <<= "this is the else case :-((((("
}
q = 0
loop 5 { //runs the loop fife times
q++
stdout <<= q
}
loop q <= 10 {
//if q is not divisible by two increase q by two, otherwise increase by one
if !(q % 2) {
q+=2
} else{
q++
}
stdout <<= q
}

//short forms equivalent:
[o == p]?{
stdout <<= "value of o equals value of p"
}:[o === p]{
stdout <<= "o is the same as p"
}:{
stdout <<= "this is the else case :-((((("
}

q = 0
[5]{            //runs the loop fife times
q++
stdout <<= q
}
[q <= 10]{
[!(q % 2)]?{q+=2}:{q++} //if q is not divisible by two increase q by two, otherwise increase by one
stdout <<= q
}
//end of short forms

#add(e,f,g, 365) /
#add {
${
result += $
}
stdout <<= "result of add: "
stdout <<= result
}

/*
Ausblick:
- loop <iterator> {} (z.b. 'loop a <<= b {stdout a}')
- return in functions
- submit in functions (wie return nur ohne abbruch der function)
- variable kann zu mehreren variablen pointen
- gui
- hexadezimal und binär
- unsigned/signed variablen
- function-loop für function rückgaben
- stdnum (stdout für zahlen)
- wurzel und exponential bibliothek
- import/export
- dynamische anpassung der wertegrößen im memory (8-2^64Bit)
- pointer erst erstellen, wenn sie benötigt werden
- mehr mit os machen (systeminformationen abfragen etc.)
*/

