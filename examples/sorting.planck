//TODO: handle case: number larger than one byte
unsorted
init_unsorted
count_of_elements = count unsorted
sorted = sort unsorted
instructions sorted

//reads from programm args
init_unsorted $num {
    unsorted << $num
    unsorted =>>
}

//get count of elements
count elements {
    count = 0x00
    temp = unsorted
    [temp ?>] {
        count++
        temp >>
    }
    <- count
}

//get value by index
get_element index, elements {
    pos = 0x00
    [elements ?>] {
        [pos == index] ? {
            <- elements
        }
        pos++
        elements >>
    }
    <- 0x00
}

//sort elements
sort elements {
    pos = count_of_elements
    [pos > 0x00] ? {
    has_swapped = 0x00 //false
    index = 0x00
        [index < pos] {
            index++
            left = get_element index, elements
            right = get_element index + 1, elements
            [left > right] ? {
            has_swapped = 0xFF //true
            temp = left
            left = right
            right = temp
            }
        }
        [!has_swapped] ? {
            <- elements
        } : {
            pos--
        }
    }
}

instructions elements {
    [elements ?>] { //for each element
        current = printable_number elements
        [current ?>] { //for each digit
        out << current
        current >>
        }
        elements >>
    }
}

//transfers binary to list of decimal digits
printable_number number {
    digits
    index = 0x00
    [number > 0] {
        digits << number % 10 + 48
        digits =>>
        number /= 10
        index++
    }
    <- digits
}